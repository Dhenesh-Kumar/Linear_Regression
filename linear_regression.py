# -*- coding: utf-8 -*-
"""LINEAR REGRESSION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-MoLrR0ku2P7lQ-XaBTasEfTdVGzxU4q

**Step-1:** Importing Libraries.
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

"""## Dataset

input variables (based on physicochemical tests):<br>
1 - longitude                 :used for location 	<br>
2 - latitude                  :used for location	<br>
3 - housing_median_age	      :average age of house<br>
4 - total_rooms	total_bedrooms:data  is in numeric form<br>
5 - population	              :around area<br>
6 - households	              :data  is in numeric form<br>
7 - median_income 	          :data  is in numeric form<br>


Output variable :<br>
8 - median_house_value<br>

**Step-2:** Loading the CSV file into a DataFrame.
"""

df = pd.read_csv("/content/housing_price.csv")

df

"""**Step-3:** Finding Null values in dataset."""

# no missing values
df.isna().sum()

"""**Step-4:** Seprating dependent and independent features into new DataFrame."""

#Restructuring the Dataframe into dependant and independant dataframe
x = df.drop(["median_house_value"], axis = 1)
y = df.median_house_value

df.columns

print("independent data\n",x)
print("\ndependent data\n",y)

"""**Step-5:** Seprating x and y DataFrame for test and train."""

#split the data in to train test
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2, random_state = 10)

#check shape of the data
print("x_train and x_test dataset shape",x_train.shape,x_test.shape)
print("y_train and y_test dataset shape",y_train.shape,y_test.shape)

"""**Step-6:** Call LinearRegression model and us fit() method with train dataset for training."""

# call model and fit the model using train data
regressor = LinearRegression()
regressor.fit(x_train, y_train)

"""**Step-7:** Printing R2 value, coefficient and intercept."""

#print r2 value
regressor.score(x_test,y_test)

#print coefficient and intercept
print("R2 value:",regressor.score(x_test,y_test))
print("\ncoefficient: \n ",regressor.coef_)
print("\nintercept:",regressor.intercept_)

"""**Step-8:** Using trained model predict for test data and then compare with orignal test data."""

# find actual vs prediction
y_pred = regressor.predict(x_test)

pred = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df1 = pred.head(10)
df1